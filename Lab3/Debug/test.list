
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003004  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003138  08003138  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003138  08003138  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003138  08003138  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000003c  0800317c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800317c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096ce  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b68  00000000  00000000  00029733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a79  00000000  00000000  0002c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b27c  00000000  00000000  00043081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823af  00000000  00000000  0004e2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d06ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  000d0700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000003c 	.word	0x2000003c
 800012c:	00000000 	.word	0x00000000
 8000130:	080030fc 	.word	0x080030fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000040 	.word	0x20000040
 800014c:	080030fc 	.word	0x080030fc

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <initButton>:
} button[NUMBER_OF_BUTTON];
/*
 * button[0]: transitioning-mode button
 * button[1]: increasing-value button
 * button[2]: setting-value button*/
void initButton(void){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
	for(int i=0; i<NUMBER_OF_BUTTON; i++){
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e041      	b.n	80007ec <initButton+0x90>
		button[i].reg[0] = button[i].reg[1] = button[i].reg[2] = button[i].reg[3] = NORMAL_STATE;
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <initButton+0xb8>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	015b      	lsls	r3, r3, #5
 800076e:	4413      	add	r3, r2
 8000770:	330c      	adds	r3, #12
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4a27      	ldr	r2, [pc, #156]	; (8000814 <initButton+0xb8>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	015b      	lsls	r3, r3, #5
 800077c:	4413      	add	r3, r2
 800077e:	330c      	adds	r3, #12
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4924      	ldr	r1, [pc, #144]	; (8000814 <initButton+0xb8>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	015b      	lsls	r3, r3, #5
 8000788:	440b      	add	r3, r1
 800078a:	3308      	adds	r3, #8
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <initButton+0xb8>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	015b      	lsls	r3, r3, #5
 8000794:	4413      	add	r3, r2
 8000796:	3308      	adds	r3, #8
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	491e      	ldr	r1, [pc, #120]	; (8000814 <initButton+0xb8>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	015b      	lsls	r3, r3, #5
 80007a0:	440b      	add	r3, r1
 80007a2:	3304      	adds	r3, #4
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <initButton+0xb8>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	015b      	lsls	r3, r3, #5
 80007ac:	4413      	add	r3, r2
 80007ae:	3304      	adds	r3, #4
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4918      	ldr	r1, [pc, #96]	; (8000814 <initButton+0xb8>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	440b      	add	r3, r1
 80007ba:	601a      	str	r2, [r3, #0]
		button[i].is_long_pressed = 0;
 80007bc:	4a15      	ldr	r2, [pc, #84]	; (8000814 <initButton+0xb8>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	015b      	lsls	r3, r3, #5
 80007c2:	4413      	add	r3, r2
 80007c4:	3314      	adds	r3, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
		button[i].is_pressed = 0;
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <initButton+0xb8>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	015b      	lsls	r3, r3, #5
 80007d0:	4413      	add	r3, r2
 80007d2:	3310      	adds	r3, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
		button[i].timer = 0;
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <initButton+0xb8>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	015b      	lsls	r3, r3, #5
 80007de:	4413      	add	r3, r2
 80007e0:	3318      	adds	r3, #24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
	for(int i=0; i<NUMBER_OF_BUTTON; i++){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	3301      	adds	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	ddba      	ble.n	8000768 <initButton+0xc>
	}
	button[0].pin = GPIO_PIN_7;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <initButton+0xb8>)
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	839a      	strh	r2, [r3, #28]
	button[1].pin = GPIO_PIN_8;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <initButton+0xb8>)
 80007fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007fe:	879a      	strh	r2, [r3, #60]	; 0x3c
	button[2].pin = GPIO_PIN_9;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <initButton+0xb8>)
 8000802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000068 	.word	0x20000068

08000818 <buttonRead>:
void buttonRead(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	e0b8      	b.n	8000996 <buttonRead+0x17e>
		button[i].reg[0] = button[i].reg[1];
 8000824:	4a60      	ldr	r2, [pc, #384]	; (80009a8 <buttonRead+0x190>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	015b      	lsls	r3, r3, #5
 800082a:	4413      	add	r3, r2
 800082c:	3304      	adds	r3, #4
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	495d      	ldr	r1, [pc, #372]	; (80009a8 <buttonRead+0x190>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	015b      	lsls	r3, r3, #5
 8000836:	440b      	add	r3, r1
 8000838:	601a      	str	r2, [r3, #0]
		button[i].reg[1] = button[i].reg[2];
 800083a:	4a5b      	ldr	r2, [pc, #364]	; (80009a8 <buttonRead+0x190>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	015b      	lsls	r3, r3, #5
 8000840:	4413      	add	r3, r2
 8000842:	3308      	adds	r3, #8
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	4958      	ldr	r1, [pc, #352]	; (80009a8 <buttonRead+0x190>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	015b      	lsls	r3, r3, #5
 800084c:	440b      	add	r3, r1
 800084e:	3304      	adds	r3, #4
 8000850:	601a      	str	r2, [r3, #0]
		button[i].reg[2] = HAL_GPIO_ReadPin(GPIOA, button[i].pin);
 8000852:	4a55      	ldr	r2, [pc, #340]	; (80009a8 <buttonRead+0x190>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	015b      	lsls	r3, r3, #5
 8000858:	4413      	add	r3, r2
 800085a:	331c      	adds	r3, #28
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	4852      	ldr	r0, [pc, #328]	; (80009ac <buttonRead+0x194>)
 8000862:	f001 fc13 	bl	800208c <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	4619      	mov	r1, r3
 800086a:	4a4f      	ldr	r2, [pc, #316]	; (80009a8 <buttonRead+0x190>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	015b      	lsls	r3, r3, #5
 8000870:	4413      	add	r3, r2
 8000872:	3308      	adds	r3, #8
 8000874:	6019      	str	r1, [r3, #0]
		if (button[i].reg[0] == button[i].reg[1]
 8000876:	4a4c      	ldr	r2, [pc, #304]	; (80009a8 <buttonRead+0x190>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	015b      	lsls	r3, r3, #5
 800087c:	4413      	add	r3, r2
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4949      	ldr	r1, [pc, #292]	; (80009a8 <buttonRead+0x190>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	015b      	lsls	r3, r3, #5
 8000886:	440b      	add	r3, r1
 8000888:	3304      	adds	r3, #4
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d17f      	bne.n	8000990 <buttonRead+0x178>
				&& button[i].reg[1] == button[i].reg[2]) {
 8000890:	4a45      	ldr	r2, [pc, #276]	; (80009a8 <buttonRead+0x190>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	015b      	lsls	r3, r3, #5
 8000896:	4413      	add	r3, r2
 8000898:	3304      	adds	r3, #4
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4942      	ldr	r1, [pc, #264]	; (80009a8 <buttonRead+0x190>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	015b      	lsls	r3, r3, #5
 80008a2:	440b      	add	r3, r1
 80008a4:	3308      	adds	r3, #8
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d171      	bne.n	8000990 <buttonRead+0x178>
			//stable state, not bouncing
			// if state was change, then processing
			if(button[i].reg[3] != button[i].reg[2]){
 80008ac:	4a3e      	ldr	r2, [pc, #248]	; (80009a8 <buttonRead+0x190>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	015b      	lsls	r3, r3, #5
 80008b2:	4413      	add	r3, r2
 80008b4:	330c      	adds	r3, #12
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	493b      	ldr	r1, [pc, #236]	; (80009a8 <buttonRead+0x190>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	015b      	lsls	r3, r3, #5
 80008be:	440b      	add	r3, r1
 80008c0:	3308      	adds	r3, #8
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d038      	beq.n	800093a <buttonRead+0x122>
				button[i].reg[3] = button[i].reg[2];
 80008c8:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <buttonRead+0x190>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	015b      	lsls	r3, r3, #5
 80008ce:	4413      	add	r3, r2
 80008d0:	3308      	adds	r3, #8
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4934      	ldr	r1, [pc, #208]	; (80009a8 <buttonRead+0x190>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	015b      	lsls	r3, r3, #5
 80008da:	440b      	add	r3, r1
 80008dc:	330c      	adds	r3, #12
 80008de:	601a      	str	r2, [r3, #0]
				// if button was not press to press
				if(button[i].reg[2] == PRESSED_STATE){
 80008e0:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <buttonRead+0x190>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	015b      	lsls	r3, r3, #5
 80008e6:	4413      	add	r3, r2
 80008e8:	3308      	adds	r3, #8
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10e      	bne.n	800090e <buttonRead+0xf6>
					//TODO
					button[i].is_pressed = 1;
 80008f0:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <buttonRead+0x190>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	015b      	lsls	r3, r3, #5
 80008f6:	4413      	add	r3, r2
 80008f8:	3310      	adds	r3, #16
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
					button[i].timer = LONG_PRESSED_TIME;
 80008fe:	4a2a      	ldr	r2, [pc, #168]	; (80009a8 <buttonRead+0x190>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	015b      	lsls	r3, r3, #5
 8000904:	4413      	add	r3, r2
 8000906:	3318      	adds	r3, #24
 8000908:	2205      	movs	r2, #5
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e040      	b.n	8000990 <buttonRead+0x178>
				}
				// if button was pressed to not pressed
				else{
					button[i].is_pressed = 0;
 800090e:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <buttonRead+0x190>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	015b      	lsls	r3, r3, #5
 8000914:	4413      	add	r3, r2
 8000916:	3310      	adds	r3, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
					button[i].is_long_pressed = 0;
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <buttonRead+0x190>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	015b      	lsls	r3, r3, #5
 8000922:	4413      	add	r3, r2
 8000924:	3314      	adds	r3, #20
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
					button[i].timer = LONG_PRESSED_TIME;
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <buttonRead+0x190>)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	015b      	lsls	r3, r3, #5
 8000930:	4413      	add	r3, r2
 8000932:	3318      	adds	r3, #24
 8000934:	2205      	movs	r2, #5
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e02a      	b.n	8000990 <buttonRead+0x178>
				}
			// if button was not change, so execute when it hold
			} else{
				button[i].timer--;
 800093a:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <buttonRead+0x190>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	015b      	lsls	r3, r3, #5
 8000940:	4413      	add	r3, r2
 8000942:	3318      	adds	r3, #24
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	4917      	ldr	r1, [pc, #92]	; (80009a8 <buttonRead+0x190>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	015b      	lsls	r3, r3, #5
 800094e:	440b      	add	r3, r1
 8000950:	3318      	adds	r3, #24
 8000952:	601a      	str	r2, [r3, #0]
				if(button[i].timer == 0){
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <buttonRead+0x190>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	015b      	lsls	r3, r3, #5
 800095a:	4413      	add	r3, r2
 800095c:	3318      	adds	r3, #24
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d115      	bne.n	8000990 <buttonRead+0x178>
					// TODO
					if(button[i].reg[2] == PRESSED_STATE){
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <buttonRead+0x190>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	015b      	lsls	r3, r3, #5
 800096a:	4413      	add	r3, r2
 800096c:	3308      	adds	r3, #8
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d106      	bne.n	8000982 <buttonRead+0x16a>
						button[i].is_long_pressed = 1;
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <buttonRead+0x190>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	015b      	lsls	r3, r3, #5
 800097a:	4413      	add	r3, r2
 800097c:	3314      	adds	r3, #20
 800097e:	2201      	movs	r2, #1
 8000980:	601a      	str	r2, [r3, #0]
					}
					button[i].timer = LONG_PRESSED_TIME;
 8000982:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <buttonRead+0x190>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	015b      	lsls	r3, r3, #5
 8000988:	4413      	add	r3, r2
 800098a:	3318      	adds	r3, #24
 800098c:	2205      	movs	r2, #5
 800098e:	601a      	str	r2, [r3, #0]
	for (unsigned i = 0; i < NUMBER_OF_BUTTON; i++) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3301      	adds	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	f67f af43 	bls.w	8000824 <buttonRead+0xc>
				}
			}
		}
	}
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000068 	.word	0x20000068
 80009ac:	40010800 	.word	0x40010800

080009b0 <buttonPressed>:
// funtion to check if button was pressed or hold
int buttonPressed(unsigned i){
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if(button[i].is_pressed == 1){
 80009b8:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <buttonPressed+0x38>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	015b      	lsls	r3, r3, #5
 80009be:	4413      	add	r3, r2
 80009c0:	3310      	adds	r3, #16
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d108      	bne.n	80009da <buttonPressed+0x2a>
		button[i].is_pressed = 0;
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <buttonPressed+0x38>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	015b      	lsls	r3, r3, #5
 80009ce:	4413      	add	r3, r2
 80009d0:	3310      	adds	r3, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
		return 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e000      	b.n	80009dc <buttonPressed+0x2c>
	}
	else return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000068 	.word	0x20000068

080009ec <buttonHold>:
int buttonHold(unsigned i){
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	if(button[i].is_long_pressed == 1){
 80009f4:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <buttonHold+0x38>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	015b      	lsls	r3, r3, #5
 80009fa:	4413      	add	r3, r2
 80009fc:	3314      	adds	r3, #20
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d108      	bne.n	8000a16 <buttonHold+0x2a>
		button[i].is_long_pressed = 0;
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <buttonHold+0x38>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	015b      	lsls	r3, r3, #5
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3314      	adds	r3, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
		 return 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <buttonHold+0x2c>
	}
	else return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000068 	.word	0x20000068

08000a28 <initToNormalRun>:
int yellow_time = 3;
int red_time_update, yellow_time_update, green_time_update;
red_time_update = 13;
yellow_time_update = 3;
green_time_update = 10;
void initToNormalRun(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	traffic_ligt_state = R_G;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <initToNormalRun+0x3c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
	timer_led1 = red_time+1;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <initToNormalRun+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <initToNormalRun+0x44>)
 8000a3a:	6013      	str	r3, [r2, #0]
	timer_led2 = green_time+1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <initToNormalRun+0x48>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <initToNormalRun+0x4c>)
 8000a44:	6013      	str	r3, [r2, #0]
	displayTrafficLight(0, 1, 0, 0);
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fe1b 	bl	8001688 <displayTrafficLight>
	displayTrafficLight(1, 0, 1, 0);
 8000a52:	2300      	movs	r3, #0
 8000a54:	2201      	movs	r2, #1
 8000a56:	2100      	movs	r1, #0
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f000 fe15 	bl	8001688 <displayTrafficLight>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000c9 	.word	0x200000c9
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	20000004 	.word	0x20000004

08000a78 <fsmForLeds>:
void fsmForLeds(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if(getTimerFlag(1)){
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 ffd5 	bl	8001a2c <getTimerFlag>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 8094 	beq.w	8000bb2 <fsmForLeds+0x13a>
			  timer_led1--;
 8000a8a:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <fsmForLeds+0x140>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	4a49      	ldr	r2, [pc, #292]	; (8000bb8 <fsmForLeds+0x140>)
 8000a92:	6013      	str	r3, [r2, #0]
			  timer_led2--;
 8000a94:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <fsmForLeds+0x144>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	4a48      	ldr	r2, [pc, #288]	; (8000bbc <fsmForLeds+0x144>)
 8000a9c:	6013      	str	r3, [r2, #0]
			  switch(traffic_light_state){
 8000a9e:	4b48      	ldr	r3, [pc, #288]	; (8000bc0 <fsmForLeds+0x148>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d871      	bhi.n	8000b8a <fsmForLeds+0x112>
 8000aa6:	a201      	add	r2, pc, #4	; (adr r2, 8000aac <fsmForLeds+0x34>)
 8000aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aac:	08000abd 	.word	0x08000abd
 8000ab0:	08000aed 	.word	0x08000aed
 8000ab4:	08000b25 	.word	0x08000b25
 8000ab8:	08000b55 	.word	0x08000b55
			  case R_G:
				  if(timer_led2 <= 0){
 8000abc:	4b3f      	ldr	r3, [pc, #252]	; (8000bbc <fsmForLeds+0x144>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	dc64      	bgt.n	8000b8e <fsmForLeds+0x116>
					  timer_led2 = yellow_time;
 8000ac4:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <fsmForLeds+0x14c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a3c      	ldr	r2, [pc, #240]	; (8000bbc <fsmForLeds+0x144>)
 8000aca:	6013      	str	r3, [r2, #0]
					  displayTrafficLight(0, 1, 0, 0);
 8000acc:	2300      	movs	r3, #0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 fdd8 	bl	8001688 <displayTrafficLight>
					  displayTrafficLight(1, 0, 0, 1);
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 fdd2 	bl	8001688 <displayTrafficLight>
					  traffic_light_state = R_Y;
 8000ae4:	4b36      	ldr	r3, [pc, #216]	; (8000bc0 <fsmForLeds+0x148>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
				  }
				  break;
 8000aea:	e050      	b.n	8000b8e <fsmForLeds+0x116>
			  case R_Y:
				  if(timer_led2 <= 0){
 8000aec:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <fsmForLeds+0x144>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dc4e      	bgt.n	8000b92 <fsmForLeds+0x11a>
					  timer_led1 = green_time;
 8000af4:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <fsmForLeds+0x150>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <fsmForLeds+0x140>)
 8000afa:	6013      	str	r3, [r2, #0]
					  timer_led2 = red_time;
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <fsmForLeds+0x154>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a2e      	ldr	r2, [pc, #184]	; (8000bbc <fsmForLeds+0x144>)
 8000b02:	6013      	str	r3, [r2, #0]
					  displayTrafficLight(0, 0, 1, 0);
 8000b04:	2300      	movs	r3, #0
 8000b06:	2201      	movs	r2, #1
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 fdbc 	bl	8001688 <displayTrafficLight>
					  displayTrafficLight(1, 1, 0, 0);
 8000b10:	2300      	movs	r3, #0
 8000b12:	2200      	movs	r2, #0
 8000b14:	2101      	movs	r1, #1
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 fdb6 	bl	8001688 <displayTrafficLight>
					  traffic_light_state = G_R;
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <fsmForLeds+0x148>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	601a      	str	r2, [r3, #0]
				  }
				  break;
 8000b22:	e036      	b.n	8000b92 <fsmForLeds+0x11a>
			  case G_R:
				  if(timer_led1 <= 0){
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <fsmForLeds+0x140>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc34      	bgt.n	8000b96 <fsmForLeds+0x11e>
					  timer_led1 = yellow_time;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <fsmForLeds+0x14c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <fsmForLeds+0x140>)
 8000b32:	6013      	str	r3, [r2, #0]
					  displayTrafficLight(0, 0, 0, 1);
 8000b34:	2301      	movs	r3, #1
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 fda4 	bl	8001688 <displayTrafficLight>
					  displayTrafficLight(1, 1, 0, 0);
 8000b40:	2300      	movs	r3, #0
 8000b42:	2200      	movs	r2, #0
 8000b44:	2101      	movs	r1, #1
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 fd9e 	bl	8001688 <displayTrafficLight>
					  traffic_light_state = Y_R;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <fsmForLeds+0x148>)
 8000b4e:	2203      	movs	r2, #3
 8000b50:	601a      	str	r2, [r3, #0]
				  }
				  break;
 8000b52:	e020      	b.n	8000b96 <fsmForLeds+0x11e>
			  case Y_R:
				  if(timer_led1 <= 0){
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <fsmForLeds+0x140>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dc16      	bgt.n	8000b8a <fsmForLeds+0x112>
					  timer_led1 = red_time;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <fsmForLeds+0x154>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <fsmForLeds+0x140>)
 8000b62:	6013      	str	r3, [r2, #0]
					  timer_led2 = green_time;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <fsmForLeds+0x150>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <fsmForLeds+0x144>)
 8000b6a:	6013      	str	r3, [r2, #0]
					  displayTrafficLight(0, 1, 0, 0);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 fd88 	bl	8001688 <displayTrafficLight>
					  displayTrafficLight(1, 0, 1, 0);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f000 fd82 	bl	8001688 <displayTrafficLight>
					  traffic_light_state = R_G;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <fsmForLeds+0x148>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
				  }
			  default:
				  break;
 8000b8a:	bf00      	nop
 8000b8c:	e004      	b.n	8000b98 <fsmForLeds+0x120>
				  break;
 8000b8e:	bf00      	nop
 8000b90:	e002      	b.n	8000b98 <fsmForLeds+0x120>
				  break;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <fsmForLeds+0x120>
				  break;
 8000b96:	bf00      	nop
			  }
			  update7SegBuffer(timer_led1, timer_led2);
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <fsmForLeds+0x140>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <fsmForLeds+0x144>)
 8000b9e:	6812      	ldr	r2, [r2, #0]
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fd34 	bl	8001610 <update7SegBuffer>
			  setTimer(1, ONE_SEC);
 8000ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bac:	2001      	movs	r0, #1
 8000bae:	f000 fee3 	bl	8001978 <setTimer>
		  }
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	20000058 	.word	0x20000058
 8000bc4:	20000010 	.word	0x20000010
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <fsm_for_set>:

void fsm_for_set(void){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	switch(set_state){
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <fsm_for_set+0xd0>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d851      	bhi.n	8000c80 <fsm_for_set+0xb0>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <fsm_for_set+0x14>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c0f 	.word	0x08000c0f
 8000be8:	08000c35 	.word	0x08000c35
 8000bec:	08000c5b 	.word	0x08000c5b
 8000bf0:	08000bf5 	.word	0x08000bf5
	case NONE:
		displayTrafficLight(0, 0, 0, 0);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 fd44 	bl	8001688 <displayTrafficLight>
		displayTrafficLight(1, 0, 0, 0);
 8000c00:	2300      	movs	r3, #0
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fd3e 	bl	8001688 <displayTrafficLight>
		break;
 8000c0c:	e045      	b.n	8000c9a <fsm_for_set+0xca>
	case R:
		displayTrafficLight(0, 1, 0, 0);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2200      	movs	r2, #0
 8000c12:	2101      	movs	r1, #1
 8000c14:	2000      	movs	r0, #0
 8000c16:	f000 fd37 	bl	8001688 <displayTrafficLight>
		displayTrafficLight(1, 1, 0, 0);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 fd31 	bl	8001688 <displayTrafficLight>
		update7SegBuffer(red_time_update, 2);
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <fsm_for_set+0xd4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fcef 	bl	8001610 <update7SegBuffer>
		break;
 8000c32:	e032      	b.n	8000c9a <fsm_for_set+0xca>
	case Y:
		displayTrafficLight(0, 0, 0, 1);
 8000c34:	2301      	movs	r3, #1
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f000 fd24 	bl	8001688 <displayTrafficLight>
		displayTrafficLight(1, 0, 0, 1);
 8000c40:	2301      	movs	r3, #1
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2001      	movs	r0, #1
 8000c48:	f000 fd1e 	bl	8001688 <displayTrafficLight>
		update7SegBuffer(yellow_time_update, 3);
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <fsm_for_set+0xd8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2103      	movs	r1, #3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fcdc 	bl	8001610 <update7SegBuffer>
		break;
 8000c58:	e01f      	b.n	8000c9a <fsm_for_set+0xca>
	case G:
		displayTrafficLight(0, 0, 1, 0);
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 fd11 	bl	8001688 <displayTrafficLight>
		displayTrafficLight(1, 0, 1, 0);
 8000c66:	2300      	movs	r3, #0
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fd0b 	bl	8001688 <displayTrafficLight>
		update7SegBuffer(green_time_update, 4);
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <fsm_for_set+0xdc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2104      	movs	r1, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fcc9 	bl	8001610 <update7SegBuffer>
		break;
 8000c7e:	e00c      	b.n	8000c9a <fsm_for_set+0xca>
	default:
		displayTrafficLight(0, 0, 0, 0);
 8000c80:	2300      	movs	r3, #0
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 fcfe 	bl	8001688 <displayTrafficLight>
		displayTrafficLight(1, 0, 0, 0);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 fcf8 	bl	8001688 <displayTrafficLight>
		break;
 8000c98:	bf00      	nop
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000c8 	.word	0x200000c8
 8000ca4:	20000014 	.word	0x20000014
 8000ca8:	20000018 	.word	0x20000018
 8000cac:	2000001c 	.word	0x2000001c

08000cb0 <blinkyLeds>:

void blinkyLeds(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	if(getTimerFlag(3)){
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 feb9 	bl	8001a2c <getTimerFlag>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d03d      	beq.n	8000d3c <blinkyLeds+0x8c>
		switch (set_state) {
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <blinkyLeds+0x90>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d024      	beq.n	8000d12 <blinkyLeds+0x62>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	dc31      	bgt.n	8000d30 <blinkyLeds+0x80>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <blinkyLeds+0x26>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d00f      	beq.n	8000cf4 <blinkyLeds+0x44>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
				update7SegBuffer(green_time_update, 4);
				break;
			default:
				break;
 8000cd4:	e02c      	b.n	8000d30 <blinkyLeds+0x80>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	481a      	ldr	r0, [pc, #104]	; (8000d44 <blinkyLeds+0x94>)
 8000cda:	f001 fa06 	bl	80020ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <blinkyLeds+0x94>)
 8000ce2:	f001 fa02 	bl	80020ea <HAL_GPIO_TogglePin>
				update7SegBuffer(red_time_update, 2);
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <blinkyLeds+0x98>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2102      	movs	r1, #2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fc8f 	bl	8001610 <update7SegBuffer>
				break;
 8000cf2:	e01e      	b.n	8000d32 <blinkyLeds+0x82>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <blinkyLeds+0x94>)
 8000cf8:	f001 f9f7 	bl	80020ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <blinkyLeds+0x94>)
 8000d00:	f001 f9f3 	bl	80020ea <HAL_GPIO_TogglePin>
				update7SegBuffer(yellow_time_update, 3);
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <blinkyLeds+0x9c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2103      	movs	r1, #3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fc80 	bl	8001610 <update7SegBuffer>
				break;
 8000d10:	e00f      	b.n	8000d32 <blinkyLeds+0x82>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000d12:	2102      	movs	r1, #2
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <blinkyLeds+0x94>)
 8000d16:	f001 f9e8 	bl	80020ea <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <blinkyLeds+0x94>)
 8000d1e:	f001 f9e4 	bl	80020ea <HAL_GPIO_TogglePin>
				update7SegBuffer(green_time_update, 4);
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <blinkyLeds+0xa0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2104      	movs	r1, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fc71 	bl	8001610 <update7SegBuffer>
				break;
 8000d2e:	e000      	b.n	8000d32 <blinkyLeds+0x82>
				break;
 8000d30:	bf00      	nop
		}
		setTimer(3, TOGGLE_TRAFFIC_LIGHT);
 8000d32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 fe1e 	bl	8001978 <setTimer>
	}
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000c8 	.word	0x200000c8
 8000d44:	40010800 	.word	0x40010800
 8000d48:	20000014 	.word	0x20000014
 8000d4c:	20000018 	.word	0x20000018
 8000d50:	2000001c 	.word	0x2000001c

08000d54 <updateSetState>:

void updateSetState(int i){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	if(i == 0) set_state = NONE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d102      	bne.n	8000d68 <updateSetState+0x14>
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <updateSetState+0x48>)
 8000d64:	2203      	movs	r2, #3
 8000d66:	701a      	strb	r2, [r3, #0]
	if(i == 2) set_state = R;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d103      	bne.n	8000d76 <updateSetState+0x22>
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <updateSetState+0x48>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	else if(i == 3) set_state = Y;
	else if(i == 4) set_state = G;
}
 8000d74:	e00c      	b.n	8000d90 <updateSetState+0x3c>
	else if(i == 3) set_state = Y;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d103      	bne.n	8000d84 <updateSetState+0x30>
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <updateSetState+0x48>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	e005      	b.n	8000d90 <updateSetState+0x3c>
	else if(i == 4) set_state = G;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d102      	bne.n	8000d90 <updateSetState+0x3c>
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <updateSetState+0x48>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	701a      	strb	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000c8 	.word	0x200000c8

08000da0 <fsm>:
	yellow_set,
	green_set,
	not_equal
} state = normal_run;

void fsm(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if(getTimerFlag(0)){
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 fe41 	bl	8001a2c <getTimerFlag>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d005      	beq.n	8000dbc <fsm+0x1c>
		scan7Seg();
 8000db0:	f000 fcba 	bl	8001728 <scan7Seg>
		setTimer(0, SCAN_7SEG);
 8000db4:	2132      	movs	r1, #50	; 0x32
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 fdde 	bl	8001978 <setTimer>
	}
	switch(state){
 8000dbc:	4b91      	ldr	r3, [pc, #580]	; (8001004 <fsm+0x264>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	f200 811d 	bhi.w	8001000 <fsm+0x260>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <fsm+0x2c>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000de1 	.word	0x08000de1
 8000dd0:	08000e09 	.word	0x08000e09
 8000dd4:	08000e93 	.word	0x08000e93
 8000dd8:	08000f1b 	.word	0x08000f1b
 8000ddc:	08000fc9 	.word	0x08000fc9
	case normal_run:
		on7SEG();
 8000de0:	f000 fa7c 	bl	80012dc <on7SEG>
		fsmForLeds();
 8000de4:	f7ff fe48 	bl	8000a78 <fsmForLeds>
		if(buttonPressed(0)){
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fde1 	bl	80009b0 <buttonPressed>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80fc 	beq.w	8000fee <fsm+0x24e>
			state = red_set;
 8000df6:	4b83      	ldr	r3, [pc, #524]	; (8001004 <fsm+0x264>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
			updateSetState(RED_SET);
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f7ff ffa9 	bl	8000d54 <updateSetState>
			fsm_for_set();
 8000e02:	f7ff fee5 	bl	8000bd0 <fsm_for_set>
		}
		break;
 8000e06:	e0f2      	b.n	8000fee <fsm+0x24e>
	case red_set:
		blinkyLeds();
 8000e08:	f7ff ff52 	bl	8000cb0 <blinkyLeds>
		if(buttonHold(1)){
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fded 	bl	80009ec <buttonHold>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00c      	beq.n	8000e32 <fsm+0x92>
			red_time_update++;
 8000e18:	4b7b      	ldr	r3, [pc, #492]	; (8001008 <fsm+0x268>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a7a      	ldr	r2, [pc, #488]	; (8001008 <fsm+0x268>)
 8000e20:	6013      	str	r3, [r2, #0]
			if(red_time_update >=100) red_time_update = 1;
 8000e22:	4b79      	ldr	r3, [pc, #484]	; (8001008 <fsm+0x268>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b63      	cmp	r3, #99	; 0x63
 8000e28:	dd15      	ble.n	8000e56 <fsm+0xb6>
 8000e2a:	4b77      	ldr	r3, [pc, #476]	; (8001008 <fsm+0x268>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e011      	b.n	8000e56 <fsm+0xb6>
		} else if(buttonPressed(1)){
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff fdbc 	bl	80009b0 <buttonPressed>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <fsm+0xb6>
			red_time_update++;
 8000e3e:	4b72      	ldr	r3, [pc, #456]	; (8001008 <fsm+0x268>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a70      	ldr	r2, [pc, #448]	; (8001008 <fsm+0x268>)
 8000e46:	6013      	str	r3, [r2, #0]
			if(red_time_update >=100) red_time_update = 1;
 8000e48:	4b6f      	ldr	r3, [pc, #444]	; (8001008 <fsm+0x268>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b63      	cmp	r3, #99	; 0x63
 8000e4e:	dd02      	ble.n	8000e56 <fsm+0xb6>
 8000e50:	4b6d      	ldr	r3, [pc, #436]	; (8001008 <fsm+0x268>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
		}
		if(buttonPressed(0)){
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fdaa 	bl	80009b0 <buttonPressed>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00b      	beq.n	8000e7a <fsm+0xda>
			state = yellow_set;
 8000e62:	4b68      	ldr	r3, [pc, #416]	; (8001004 <fsm+0x264>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	701a      	strb	r2, [r3, #0]
			red_time_update = red_time;
 8000e68:	4b68      	ldr	r3, [pc, #416]	; (800100c <fsm+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a66      	ldr	r2, [pc, #408]	; (8001008 <fsm+0x268>)
 8000e6e:	6013      	str	r3, [r2, #0]
			updateSetState(YELLOW_SET);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f7ff ff6f 	bl	8000d54 <updateSetState>
			fsm_for_set();
 8000e76:	f7ff feab 	bl	8000bd0 <fsm_for_set>
		}
		if(buttonPressed(2)){
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff fd98 	bl	80009b0 <buttonPressed>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80b5 	beq.w	8000ff2 <fsm+0x252>
			red_time = red_time_update;
 8000e88:	4b5f      	ldr	r3, [pc, #380]	; (8001008 <fsm+0x268>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a5f      	ldr	r2, [pc, #380]	; (800100c <fsm+0x26c>)
 8000e8e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000e90:	e0af      	b.n	8000ff2 <fsm+0x252>
	case yellow_set:
		blinkyLeds();
 8000e92:	f7ff ff0d 	bl	8000cb0 <blinkyLeds>
		if(buttonHold(1)){
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fda8 	bl	80009ec <buttonHold>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00c      	beq.n	8000ebc <fsm+0x11c>
			yellow_time_update++;
 8000ea2:	4b5b      	ldr	r3, [pc, #364]	; (8001010 <fsm+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a59      	ldr	r2, [pc, #356]	; (8001010 <fsm+0x270>)
 8000eaa:	6013      	str	r3, [r2, #0]
			if(yellow_time_update >=100) yellow_time_update = 1;
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <fsm+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b63      	cmp	r3, #99	; 0x63
 8000eb2:	dd15      	ble.n	8000ee0 <fsm+0x140>
 8000eb4:	4b56      	ldr	r3, [pc, #344]	; (8001010 <fsm+0x270>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e011      	b.n	8000ee0 <fsm+0x140>
		} else if(buttonPressed(1)){
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fd77 	bl	80009b0 <buttonPressed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <fsm+0x140>
			yellow_time_update++;
 8000ec8:	4b51      	ldr	r3, [pc, #324]	; (8001010 <fsm+0x270>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a50      	ldr	r2, [pc, #320]	; (8001010 <fsm+0x270>)
 8000ed0:	6013      	str	r3, [r2, #0]
			if(yellow_time_update >=100) yellow_time_update = 1;
 8000ed2:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <fsm+0x270>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b63      	cmp	r3, #99	; 0x63
 8000ed8:	dd02      	ble.n	8000ee0 <fsm+0x140>
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <fsm+0x270>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
		}
		if(buttonPressed(0)){
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fd65 	bl	80009b0 <buttonPressed>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d00b      	beq.n	8000f04 <fsm+0x164>
			state = green_set;
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <fsm+0x264>)
 8000eee:	2203      	movs	r2, #3
 8000ef0:	701a      	strb	r2, [r3, #0]
			yellow_time_update = yellow_time;
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <fsm+0x274>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a46      	ldr	r2, [pc, #280]	; (8001010 <fsm+0x270>)
 8000ef8:	6013      	str	r3, [r2, #0]
			updateSetState(GREEN_SET);
 8000efa:	2004      	movs	r0, #4
 8000efc:	f7ff ff2a 	bl	8000d54 <updateSetState>
			fsm_for_set();
 8000f00:	f7ff fe66 	bl	8000bd0 <fsm_for_set>
		}
		if(buttonPressed(2)){
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fd53 	bl	80009b0 <buttonPressed>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d072      	beq.n	8000ff6 <fsm+0x256>
			yellow_time = yellow_time_update;
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <fsm+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <fsm+0x274>)
 8000f16:	6013      	str	r3, [r2, #0]
		}
		break;
 8000f18:	e06d      	b.n	8000ff6 <fsm+0x256>
	case green_set:
		blinkyLeds();
 8000f1a:	f7ff fec9 	bl	8000cb0 <blinkyLeds>
		if(buttonHold(1)){
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff fd64 	bl	80009ec <buttonHold>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00c      	beq.n	8000f44 <fsm+0x1a4>
			green_time_update++;
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <fsm+0x278>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a39      	ldr	r2, [pc, #228]	; (8001018 <fsm+0x278>)
 8000f32:	6013      	str	r3, [r2, #0]
			if(green_time_update >=100) green_time_update = 1;
 8000f34:	4b38      	ldr	r3, [pc, #224]	; (8001018 <fsm+0x278>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b63      	cmp	r3, #99	; 0x63
 8000f3a:	dd15      	ble.n	8000f68 <fsm+0x1c8>
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <fsm+0x278>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e011      	b.n	8000f68 <fsm+0x1c8>
		} else if(buttonPressed(1)){
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fd33 	bl	80009b0 <buttonPressed>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <fsm+0x1c8>
			green_time_update++;
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <fsm+0x278>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a30      	ldr	r2, [pc, #192]	; (8001018 <fsm+0x278>)
 8000f58:	6013      	str	r3, [r2, #0]
			if(green_time_update >=100) green_time_update = 1;
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <fsm+0x278>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b63      	cmp	r3, #99	; 0x63
 8000f60:	dd02      	ble.n	8000f68 <fsm+0x1c8>
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <fsm+0x278>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
		}
		if(buttonPressed(0)){
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fd21 	bl	80009b0 <buttonPressed>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d01e      	beq.n	8000fb2 <fsm+0x212>
			if(red_time == green_time + yellow_time){
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <fsm+0x27c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <fsm+0x274>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <fsm+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d109      	bne.n	8000f9a <fsm+0x1fa>
				state = normal_run;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <fsm+0x264>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
				green_time_update = green_time;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <fsm+0x27c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <fsm+0x278>)
 8000f92:	6013      	str	r3, [r2, #0]
				initToNormalRun();
 8000f94:	f7ff fd48 	bl	8000a28 <initToNormalRun>
 8000f98:	e00b      	b.n	8000fb2 <fsm+0x212>
			} else{
				state = not_equal;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <fsm+0x264>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	701a      	strb	r2, [r3, #0]
				green_time_update = green_time;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <fsm+0x27c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <fsm+0x278>)
 8000fa6:	6013      	str	r3, [r2, #0]
				updateSetState(0);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fed3 	bl	8000d54 <updateSetState>
				fsm_for_set();
 8000fae:	f7ff fe0f 	bl	8000bd0 <fsm_for_set>
			}

		}
		if(buttonPressed(2)){
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f7ff fcfc 	bl	80009b0 <buttonPressed>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d01d      	beq.n	8000ffa <fsm+0x25a>
			green_time = green_time_update;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <fsm+0x278>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <fsm+0x27c>)
 8000fc4:	6013      	str	r3, [r2, #0]
		}
		break;
 8000fc6:	e018      	b.n	8000ffa <fsm+0x25a>
	case not_equal:
		off7SEG();
 8000fc8:	f000 f95a 	bl	8001280 <off7SEG>
		if(buttonPressed(0)){
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fcef 	bl	80009b0 <buttonPressed>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d012      	beq.n	8000ffe <fsm+0x25e>
			state = red_set;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <fsm+0x264>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
			updateSetState(RED_SET);
 8000fde:	2002      	movs	r0, #2
 8000fe0:	f7ff feb8 	bl	8000d54 <updateSetState>
			on7SEG();
 8000fe4:	f000 f97a 	bl	80012dc <on7SEG>
			fsm_for_set();
 8000fe8:	f7ff fdf2 	bl	8000bd0 <fsm_for_set>
		}
		break;
 8000fec:	e007      	b.n	8000ffe <fsm+0x25e>
		break;
 8000fee:	bf00      	nop
 8000ff0:	e006      	b.n	8001000 <fsm+0x260>
		break;
 8000ff2:	bf00      	nop
 8000ff4:	e004      	b.n	8001000 <fsm+0x260>
		break;
 8000ff6:	bf00      	nop
 8000ff8:	e002      	b.n	8001000 <fsm+0x260>
		break;
 8000ffa:	bf00      	nop
 8000ffc:	e000      	b.n	8001000 <fsm+0x260>
		break;
 8000ffe:	bf00      	nop
	}
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000005c 	.word	0x2000005c
 8001008:	20000014 	.word	0x20000014
 800100c:	20000008 	.word	0x20000008
 8001010:	20000018 	.word	0x20000018
 8001014:	20000010 	.word	0x20000010
 8001018:	2000001c 	.word	0x2000001c
 800101c:	2000000c 	.word	0x2000000c

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fd48 	bl	8001ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f83a 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f8c0 	bl	80011b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001030:	f000 f872 	bl	8001118 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001034:	4819      	ldr	r0, [pc, #100]	; (800109c <main+0x7c>)
 8001036:	f001 fc9d 	bl	8002974 <HAL_TIM_Base_Start_IT>
  setTimer(0, SCAN_7SEG);
 800103a:	2132      	movs	r1, #50	; 0x32
 800103c:	2000      	movs	r0, #0
 800103e:	f000 fc9b 	bl	8001978 <setTimer>
  setTimer(1, ONE_SEC);
 8001042:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001046:	2001      	movs	r0, #1
 8001048:	f000 fc96 	bl	8001978 <setTimer>
  setTimer(2, READ_BUTTON_TIMER);
 800104c:	2132      	movs	r1, #50	; 0x32
 800104e:	2002      	movs	r0, #2
 8001050:	f000 fc92 	bl	8001978 <setTimer>
  setTimer(3, TOGGLE_TRAFFIC_LIGHT);
 8001054:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001058:	2003      	movs	r0, #3
 800105a:	f000 fc8d 	bl	8001978 <setTimer>
  displayTrafficLight(0, 1, 0, 0);
 800105e:	2300      	movs	r3, #0
 8001060:	2200      	movs	r2, #0
 8001062:	2101      	movs	r1, #1
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fb0f 	bl	8001688 <displayTrafficLight>
  displayTrafficLight(1, 0, 1, 0);
 800106a:	2300      	movs	r3, #0
 800106c:	2201      	movs	r2, #1
 800106e:	2100      	movs	r1, #0
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fb09 	bl	8001688 <displayTrafficLight>
  scan7Seg();
 8001076:	f000 fb57 	bl	8001728 <scan7Seg>
  initButton();
 800107a:	f7ff fb6f 	bl	800075c <initButton>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getTimerFlag(2)){
 800107e:	2002      	movs	r0, #2
 8001080:	f000 fcd4 	bl	8001a2c <getTimerFlag>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <main+0x76>
		  buttonRead();
 800108a:	f7ff fbc5 	bl	8000818 <buttonRead>
		  setTimer(2, READ_BUTTON_TIMER);
 800108e:	2132      	movs	r1, #50	; 0x32
 8001090:	2002      	movs	r0, #2
 8001092:	f000 fc71 	bl	8001978 <setTimer>
	  }
	  fsm();
 8001096:	f7ff fe83 	bl	8000da0 <fsm>
  {
 800109a:	e7f0      	b.n	800107e <main+0x5e>
 800109c:	200000cc 	.word	0x200000cc

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	2228      	movs	r2, #40	; 0x28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 f81c 	bl	80030ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	2310      	movs	r3, #16
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 f820 	bl	800211c <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010e2:	f000 f8c7 	bl	8001274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fa8c 	bl	800261c <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8b3 	bl	8001274 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3740      	adds	r7, #64	; 0x40
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_TIM2_Init+0x94>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_TIM2_Init+0x94>)
 800113e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001142:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_TIM2_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_TIM2_Init+0x94>)
 800114c:	2209      	movs	r2, #9
 800114e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <MX_TIM2_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_TIM2_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800115c:	4813      	ldr	r0, [pc, #76]	; (80011ac <MX_TIM2_Init+0x94>)
 800115e:	f001 fbb9 	bl	80028d4 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001168:	f000 f884 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_TIM2_Init+0x94>)
 800117a:	f001 fd4f 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001184:	f000 f876 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_TIM2_Init+0x94>)
 8001196:	f001 ff1b 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a0:	f000 f868 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000cc 	.word	0x200000cc

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <MX_GPIO_Init+0xb8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <MX_GPIO_Init+0xb8>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <MX_GPIO_Init+0xb8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_GPIO_Init+0xb8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <MX_GPIO_Init+0xb8>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_GPIO_Init+0xb8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN1_Pin|YELLOW1_Pin|RED1_Pin|GREEN2_Pin
 80011f4:	2200      	movs	r2, #0
 80011f6:	217e      	movs	r1, #126	; 0x7e
 80011f8:	481c      	ldr	r0, [pc, #112]	; (800126c <MX_GPIO_Init+0xbc>)
 80011fa:	f000 ff5e 	bl	80020ba <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_4_Pin
 80011fe:	2200      	movs	r2, #0
 8001200:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001204:	481a      	ldr	r0, [pc, #104]	; (8001270 <MX_GPIO_Init+0xc0>)
 8001206:	f000 ff58 	bl	80020ba <HAL_GPIO_WritePin>
                          |SEG7_D_Pin|SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GREEN1_Pin YELLOW1_Pin RED1_Pin GREEN2_Pin
                           YELLOW2_Pin RED2_Pin */
  GPIO_InitStruct.Pin = GREEN1_Pin|YELLOW1_Pin|RED1_Pin|GREEN2_Pin
 800120a:	237e      	movs	r3, #126	; 0x7e
 800120c:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2302      	movs	r3, #2
 8001218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4619      	mov	r1, r3
 8001220:	4812      	ldr	r0, [pc, #72]	; (800126c <MX_GPIO_Init+0xbc>)
 8001222:	f000 fdb9 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001226:	f44f 7360 	mov.w	r3, #896	; 0x380
 800122a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_GPIO_Init+0xbc>)
 800123c:	f000 fdac 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG7_A_Pin SEG7_B_Pin SEG7_C_Pin SEG7_4_Pin
                           SEG7_D_Pin SEG7_E_Pin SEG7_F_Pin SEG7_G_Pin
                           SEG7_1_Pin SEG7_2_Pin SEG7_3_Pin */
  GPIO_InitStruct.Pin = SEG7_A_Pin|SEG7_B_Pin|SEG7_C_Pin|SEG7_4_Pin
 8001240:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001244:	60bb      	str	r3, [r7, #8]
                          |SEG7_D_Pin|SEG7_E_Pin|SEG7_F_Pin|SEG7_G_Pin
                          |SEG7_1_Pin|SEG7_2_Pin|SEG7_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2302      	movs	r3, #2
 8001250:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_GPIO_Init+0xc0>)
 800125a:	f000 fd9d 	bl	8001d98 <HAL_GPIO_Init>

}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40010800 	.word	0x40010800
 8001270:	40010c00 	.word	0x40010c00

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <off7SEG>:
int buffer_7SEG[4] = {1,3,1,0};
//id to scan 7 seg led
int id = 0;
int flag_to_off = 0;
//function to display 7 segment
void off7SEG(void){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	flag_to_off = 1;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <off7SEG+0x54>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2101      	movs	r1, #1
 800128e:	4812      	ldr	r0, [pc, #72]	; (80012d8 <off7SEG+0x58>)
 8001290:	f000 ff13 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2102      	movs	r1, #2
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <off7SEG+0x58>)
 800129a:	f000 ff0e 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2104      	movs	r1, #4
 80012a2:	480d      	ldr	r0, [pc, #52]	; (80012d8 <off7SEG+0x58>)
 80012a4:	f000 ff09 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2108      	movs	r1, #8
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <off7SEG+0x58>)
 80012ae:	f000 ff04 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2110      	movs	r1, #16
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <off7SEG+0x58>)
 80012b8:	f000 feff 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2120      	movs	r1, #32
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <off7SEG+0x58>)
 80012c2:	f000 fefa 	bl	80020ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2140      	movs	r1, #64	; 0x40
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <off7SEG+0x58>)
 80012cc:	f000 fef5 	bl	80020ba <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000064 	.word	0x20000064
 80012d8:	40010c00 	.word	0x40010c00

080012dc <on7SEG>:
void on7SEG(void){
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	flag_to_off = 0;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <on7SEG+0x14>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000064 	.word	0x20000064

080012f4 <display7SEG>:
void display7SEG(int num){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b09      	cmp	r3, #9
 8001300:	f200 8180 	bhi.w	8001604 <display7SEG+0x310>
 8001304:	a201      	add	r2, pc, #4	; (adr r2, 800130c <display7SEG+0x18>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	08001335 	.word	0x08001335
 8001310:	0800137d 	.word	0x0800137d
 8001314:	080013c5 	.word	0x080013c5
 8001318:	0800140d 	.word	0x0800140d
 800131c:	08001455 	.word	0x08001455
 8001320:	0800149d 	.word	0x0800149d
 8001324:	080014e5 	.word	0x080014e5
 8001328:	0800152d 	.word	0x0800152d
 800132c:	08001575 	.word	0x08001575
 8001330:	080015bd 	.word	0x080015bd
	switch(num)
	{
	case 0:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2101      	movs	r1, #1
 8001338:	48b4      	ldr	r0, [pc, #720]	; (800160c <display7SEG+0x318>)
 800133a:	f000 febe 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2102      	movs	r1, #2
 8001342:	48b2      	ldr	r0, [pc, #712]	; (800160c <display7SEG+0x318>)
 8001344:	f000 feb9 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2104      	movs	r1, #4
 800134c:	48af      	ldr	r0, [pc, #700]	; (800160c <display7SEG+0x318>)
 800134e:	f000 feb4 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2108      	movs	r1, #8
 8001356:	48ad      	ldr	r0, [pc, #692]	; (800160c <display7SEG+0x318>)
 8001358:	f000 feaf 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2110      	movs	r1, #16
 8001360:	48aa      	ldr	r0, [pc, #680]	; (800160c <display7SEG+0x318>)
 8001362:	f000 feaa 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2120      	movs	r1, #32
 800136a:	48a8      	ldr	r0, [pc, #672]	; (800160c <display7SEG+0x318>)
 800136c:	f000 fea5 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	48a5      	ldr	r0, [pc, #660]	; (800160c <display7SEG+0x318>)
 8001376:	f000 fea0 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 800137a:	e143      	b.n	8001604 <display7SEG+0x310>
	case 1:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2101      	movs	r1, #1
 8001380:	48a2      	ldr	r0, [pc, #648]	; (800160c <display7SEG+0x318>)
 8001382:	f000 fe9a 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2102      	movs	r1, #2
 800138a:	48a0      	ldr	r0, [pc, #640]	; (800160c <display7SEG+0x318>)
 800138c:	f000 fe95 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2104      	movs	r1, #4
 8001394:	489d      	ldr	r0, [pc, #628]	; (800160c <display7SEG+0x318>)
 8001396:	f000 fe90 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2108      	movs	r1, #8
 800139e:	489b      	ldr	r0, [pc, #620]	; (800160c <display7SEG+0x318>)
 80013a0:	f000 fe8b 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2110      	movs	r1, #16
 80013a8:	4898      	ldr	r0, [pc, #608]	; (800160c <display7SEG+0x318>)
 80013aa:	f000 fe86 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2120      	movs	r1, #32
 80013b2:	4896      	ldr	r0, [pc, #600]	; (800160c <display7SEG+0x318>)
 80013b4:	f000 fe81 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4893      	ldr	r0, [pc, #588]	; (800160c <display7SEG+0x318>)
 80013be:	f000 fe7c 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 80013c2:	e11f      	b.n	8001604 <display7SEG+0x310>
	case 2:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2101      	movs	r1, #1
 80013c8:	4890      	ldr	r0, [pc, #576]	; (800160c <display7SEG+0x318>)
 80013ca:	f000 fe76 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2102      	movs	r1, #2
 80013d2:	488e      	ldr	r0, [pc, #568]	; (800160c <display7SEG+0x318>)
 80013d4:	f000 fe71 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2104      	movs	r1, #4
 80013dc:	488b      	ldr	r0, [pc, #556]	; (800160c <display7SEG+0x318>)
 80013de:	f000 fe6c 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2108      	movs	r1, #8
 80013e6:	4889      	ldr	r0, [pc, #548]	; (800160c <display7SEG+0x318>)
 80013e8:	f000 fe67 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2110      	movs	r1, #16
 80013f0:	4886      	ldr	r0, [pc, #536]	; (800160c <display7SEG+0x318>)
 80013f2:	f000 fe62 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2120      	movs	r1, #32
 80013fa:	4884      	ldr	r0, [pc, #528]	; (800160c <display7SEG+0x318>)
 80013fc:	f000 fe5d 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	4881      	ldr	r0, [pc, #516]	; (800160c <display7SEG+0x318>)
 8001406:	f000 fe58 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 800140a:	e0fb      	b.n	8001604 <display7SEG+0x310>
	case 3:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2101      	movs	r1, #1
 8001410:	487e      	ldr	r0, [pc, #504]	; (800160c <display7SEG+0x318>)
 8001412:	f000 fe52 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2102      	movs	r1, #2
 800141a:	487c      	ldr	r0, [pc, #496]	; (800160c <display7SEG+0x318>)
 800141c:	f000 fe4d 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2104      	movs	r1, #4
 8001424:	4879      	ldr	r0, [pc, #484]	; (800160c <display7SEG+0x318>)
 8001426:	f000 fe48 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2108      	movs	r1, #8
 800142e:	4877      	ldr	r0, [pc, #476]	; (800160c <display7SEG+0x318>)
 8001430:	f000 fe43 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2110      	movs	r1, #16
 8001438:	4874      	ldr	r0, [pc, #464]	; (800160c <display7SEG+0x318>)
 800143a:	f000 fe3e 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2120      	movs	r1, #32
 8001442:	4872      	ldr	r0, [pc, #456]	; (800160c <display7SEG+0x318>)
 8001444:	f000 fe39 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	486f      	ldr	r0, [pc, #444]	; (800160c <display7SEG+0x318>)
 800144e:	f000 fe34 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 8001452:	e0d7      	b.n	8001604 <display7SEG+0x310>
	case 4:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2101      	movs	r1, #1
 8001458:	486c      	ldr	r0, [pc, #432]	; (800160c <display7SEG+0x318>)
 800145a:	f000 fe2e 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2102      	movs	r1, #2
 8001462:	486a      	ldr	r0, [pc, #424]	; (800160c <display7SEG+0x318>)
 8001464:	f000 fe29 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2104      	movs	r1, #4
 800146c:	4867      	ldr	r0, [pc, #412]	; (800160c <display7SEG+0x318>)
 800146e:	f000 fe24 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2108      	movs	r1, #8
 8001476:	4865      	ldr	r0, [pc, #404]	; (800160c <display7SEG+0x318>)
 8001478:	f000 fe1f 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2110      	movs	r1, #16
 8001480:	4862      	ldr	r0, [pc, #392]	; (800160c <display7SEG+0x318>)
 8001482:	f000 fe1a 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	4860      	ldr	r0, [pc, #384]	; (800160c <display7SEG+0x318>)
 800148c:	f000 fe15 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2140      	movs	r1, #64	; 0x40
 8001494:	485d      	ldr	r0, [pc, #372]	; (800160c <display7SEG+0x318>)
 8001496:	f000 fe10 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 800149a:	e0b3      	b.n	8001604 <display7SEG+0x310>
	case 5:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	485a      	ldr	r0, [pc, #360]	; (800160c <display7SEG+0x318>)
 80014a2:	f000 fe0a 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2102      	movs	r1, #2
 80014aa:	4858      	ldr	r0, [pc, #352]	; (800160c <display7SEG+0x318>)
 80014ac:	f000 fe05 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2104      	movs	r1, #4
 80014b4:	4855      	ldr	r0, [pc, #340]	; (800160c <display7SEG+0x318>)
 80014b6:	f000 fe00 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2108      	movs	r1, #8
 80014be:	4853      	ldr	r0, [pc, #332]	; (800160c <display7SEG+0x318>)
 80014c0:	f000 fdfb 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2110      	movs	r1, #16
 80014c8:	4850      	ldr	r0, [pc, #320]	; (800160c <display7SEG+0x318>)
 80014ca:	f000 fdf6 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2120      	movs	r1, #32
 80014d2:	484e      	ldr	r0, [pc, #312]	; (800160c <display7SEG+0x318>)
 80014d4:	f000 fdf1 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	484b      	ldr	r0, [pc, #300]	; (800160c <display7SEG+0x318>)
 80014de:	f000 fdec 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 80014e2:	e08f      	b.n	8001604 <display7SEG+0x310>
	case 6:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2101      	movs	r1, #1
 80014e8:	4848      	ldr	r0, [pc, #288]	; (800160c <display7SEG+0x318>)
 80014ea:	f000 fde6 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2102      	movs	r1, #2
 80014f2:	4846      	ldr	r0, [pc, #280]	; (800160c <display7SEG+0x318>)
 80014f4:	f000 fde1 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2104      	movs	r1, #4
 80014fc:	4843      	ldr	r0, [pc, #268]	; (800160c <display7SEG+0x318>)
 80014fe:	f000 fddc 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2108      	movs	r1, #8
 8001506:	4841      	ldr	r0, [pc, #260]	; (800160c <display7SEG+0x318>)
 8001508:	f000 fdd7 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2110      	movs	r1, #16
 8001510:	483e      	ldr	r0, [pc, #248]	; (800160c <display7SEG+0x318>)
 8001512:	f000 fdd2 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2120      	movs	r1, #32
 800151a:	483c      	ldr	r0, [pc, #240]	; (800160c <display7SEG+0x318>)
 800151c:	f000 fdcd 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4839      	ldr	r0, [pc, #228]	; (800160c <display7SEG+0x318>)
 8001526:	f000 fdc8 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 800152a:	e06b      	b.n	8001604 <display7SEG+0x310>
	case 7:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2101      	movs	r1, #1
 8001530:	4836      	ldr	r0, [pc, #216]	; (800160c <display7SEG+0x318>)
 8001532:	f000 fdc2 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2102      	movs	r1, #2
 800153a:	4834      	ldr	r0, [pc, #208]	; (800160c <display7SEG+0x318>)
 800153c:	f000 fdbd 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2104      	movs	r1, #4
 8001544:	4831      	ldr	r0, [pc, #196]	; (800160c <display7SEG+0x318>)
 8001546:	f000 fdb8 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2108      	movs	r1, #8
 800154e:	482f      	ldr	r0, [pc, #188]	; (800160c <display7SEG+0x318>)
 8001550:	f000 fdb3 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2110      	movs	r1, #16
 8001558:	482c      	ldr	r0, [pc, #176]	; (800160c <display7SEG+0x318>)
 800155a:	f000 fdae 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2120      	movs	r1, #32
 8001562:	482a      	ldr	r0, [pc, #168]	; (800160c <display7SEG+0x318>)
 8001564:	f000 fda9 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2140      	movs	r1, #64	; 0x40
 800156c:	4827      	ldr	r0, [pc, #156]	; (800160c <display7SEG+0x318>)
 800156e:	f000 fda4 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 8001572:	e047      	b.n	8001604 <display7SEG+0x310>
	case 8:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	2101      	movs	r1, #1
 8001578:	4824      	ldr	r0, [pc, #144]	; (800160c <display7SEG+0x318>)
 800157a:	f000 fd9e 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2102      	movs	r1, #2
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <display7SEG+0x318>)
 8001584:	f000 fd99 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2104      	movs	r1, #4
 800158c:	481f      	ldr	r0, [pc, #124]	; (800160c <display7SEG+0x318>)
 800158e:	f000 fd94 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2108      	movs	r1, #8
 8001596:	481d      	ldr	r0, [pc, #116]	; (800160c <display7SEG+0x318>)
 8001598:	f000 fd8f 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2110      	movs	r1, #16
 80015a0:	481a      	ldr	r0, [pc, #104]	; (800160c <display7SEG+0x318>)
 80015a2:	f000 fd8a 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2120      	movs	r1, #32
 80015aa:	4818      	ldr	r0, [pc, #96]	; (800160c <display7SEG+0x318>)
 80015ac:	f000 fd85 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	4815      	ldr	r0, [pc, #84]	; (800160c <display7SEG+0x318>)
 80015b6:	f000 fd80 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 80015ba:	e023      	b.n	8001604 <display7SEG+0x310>
	case 9:
		HAL_GPIO_WritePin(GPIOB, SEG7_A_Pin, RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2101      	movs	r1, #1
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <display7SEG+0x318>)
 80015c2:	f000 fd7a 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_B_Pin, RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2102      	movs	r1, #2
 80015ca:	4810      	ldr	r0, [pc, #64]	; (800160c <display7SEG+0x318>)
 80015cc:	f000 fd75 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_C_Pin, RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2104      	movs	r1, #4
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <display7SEG+0x318>)
 80015d6:	f000 fd70 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_D_Pin, RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2108      	movs	r1, #8
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <display7SEG+0x318>)
 80015e0:	f000 fd6b 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_E_Pin, SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2110      	movs	r1, #16
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <display7SEG+0x318>)
 80015ea:	f000 fd66 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_F_Pin, RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2120      	movs	r1, #32
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <display7SEG+0x318>)
 80015f4:	f000 fd61 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, SEG7_G_Pin, RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2140      	movs	r1, #64	; 0x40
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <display7SEG+0x318>)
 80015fe:	f000 fd5c 	bl	80020ba <HAL_GPIO_WritePin>
		break;
 8001602:	bf00      	nop
	}
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40010c00 	.word	0x40010c00

08001610 <update7SegBuffer>:
// update buffer to display after countdown
void update7SegBuffer(int time1, int time2){
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	buffer_7SEG[0] = time1/10;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <update7SegBuffer+0x70>)
 800161e:	fb82 1203 	smull	r1, r2, r2, r3
 8001622:	1092      	asrs	r2, r2, #2
 8001624:	17db      	asrs	r3, r3, #31
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4a16      	ldr	r2, [pc, #88]	; (8001684 <update7SegBuffer+0x74>)
 800162a:	6013      	str	r3, [r2, #0]
	buffer_7SEG[1] = time1%10;
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <update7SegBuffer+0x70>)
 8001630:	fb83 2301 	smull	r2, r3, r3, r1
 8001634:	109a      	asrs	r2, r3, #2
 8001636:	17cb      	asrs	r3, r1, #31
 8001638:	1ad2      	subs	r2, r2, r3
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	1aca      	subs	r2, r1, r3
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <update7SegBuffer+0x74>)
 8001646:	605a      	str	r2, [r3, #4]
	buffer_7SEG[2] = time2/10;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <update7SegBuffer+0x70>)
 800164c:	fb82 1203 	smull	r1, r2, r2, r3
 8001650:	1092      	asrs	r2, r2, #2
 8001652:	17db      	asrs	r3, r3, #31
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <update7SegBuffer+0x74>)
 8001658:	6093      	str	r3, [r2, #8]
	buffer_7SEG[3] = time2%10;
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <update7SegBuffer+0x70>)
 800165e:	fb83 2301 	smull	r2, r3, r3, r1
 8001662:	109a      	asrs	r2, r3, #2
 8001664:	17cb      	asrs	r3, r1, #31
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	1aca      	subs	r2, r1, r3
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <update7SegBuffer+0x74>)
 8001674:	60da      	str	r2, [r3, #12]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	66666667 	.word	0x66666667
 8001684:	20000020 	.word	0x20000020

08001688 <displayTrafficLight>:

void displayTrafficLight (int id, int red, int green, int yellow){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
	if(id == 0){
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d11e      	bne.n	80016da <displayTrafficLight+0x52>
		HAL_GPIO_WritePin(GPIOA, RED1_Pin, (1-red));
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f1c3 0301 	rsb	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	2108      	movs	r1, #8
 80016aa:	481e      	ldr	r0, [pc, #120]	; (8001724 <displayTrafficLight+0x9c>)
 80016ac:	f000 fd05 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREEN1_Pin, (1-green));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f1c3 0301 	rsb	r3, r3, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	2102      	movs	r1, #2
 80016be:	4819      	ldr	r0, [pc, #100]	; (8001724 <displayTrafficLight+0x9c>)
 80016c0:	f000 fcfb 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, YELLOW1_Pin, (1-yellow));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f1c3 0301 	rsb	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	2104      	movs	r1, #4
 80016d2:	4814      	ldr	r0, [pc, #80]	; (8001724 <displayTrafficLight+0x9c>)
 80016d4:	f000 fcf1 	bl	80020ba <HAL_GPIO_WritePin>
	}else if(id == 1){
		HAL_GPIO_WritePin(GPIOA, RED2_Pin, (1-red));
		HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, (1-green));
		HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, (1-yellow));
	}
}
 80016d8:	e020      	b.n	800171c <displayTrafficLight+0x94>
	}else if(id == 1){
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d11d      	bne.n	800171c <displayTrafficLight+0x94>
		HAL_GPIO_WritePin(GPIOA, RED2_Pin, (1-red));
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f1c3 0301 	rsb	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	2140      	movs	r1, #64	; 0x40
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <displayTrafficLight+0x9c>)
 80016f0:	f000 fce3 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREEN2_Pin, (1-green));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f1c3 0301 	rsb	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	2110      	movs	r1, #16
 8001702:	4808      	ldr	r0, [pc, #32]	; (8001724 <displayTrafficLight+0x9c>)
 8001704:	f000 fcd9 	bl	80020ba <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, YELLOW2_Pin, (1-yellow));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f1c3 0301 	rsb	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	2120      	movs	r1, #32
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <displayTrafficLight+0x9c>)
 8001718:	f000 fccf 	bl	80020ba <HAL_GPIO_WritePin>
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010800 	.word	0x40010800

08001728 <scan7Seg>:

void scan7Seg(void){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	if(flag_to_off) return;
 800172c:	4b47      	ldr	r3, [pc, #284]	; (800184c <scan7Seg+0x124>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 8088 	bne.w	8001846 <scan7Seg+0x11e>
	if(id == 0){
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <scan7Seg+0x128>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d117      	bne.n	800176e <scan7Seg+0x46>
	  HAL_GPIO_WritePin(GPIOB, SEG7_1_Pin, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	4844      	ldr	r0, [pc, #272]	; (8001854 <scan7Seg+0x12c>)
 8001744:	f000 fcb9 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_2_Pin, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	4841      	ldr	r0, [pc, #260]	; (8001854 <scan7Seg+0x12c>)
 8001750:	f000 fcb3 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_3_Pin, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175a:	483e      	ldr	r0, [pc, #248]	; (8001854 <scan7Seg+0x12c>)
 800175c:	f000 fcad 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_4_Pin, 1);
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001766:	483b      	ldr	r0, [pc, #236]	; (8001854 <scan7Seg+0x12c>)
 8001768:	f000 fca7 	bl	80020ba <HAL_GPIO_WritePin>
 800176c:	e052      	b.n	8001814 <scan7Seg+0xec>
  }else if(id == 1){
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <scan7Seg+0x128>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d117      	bne.n	80017a6 <scan7Seg+0x7e>
	  HAL_GPIO_WritePin(GPIOB, SEG7_1_Pin, 1);
 8001776:	2201      	movs	r2, #1
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	4836      	ldr	r0, [pc, #216]	; (8001854 <scan7Seg+0x12c>)
 800177c:	f000 fc9d 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_2_Pin, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001786:	4833      	ldr	r0, [pc, #204]	; (8001854 <scan7Seg+0x12c>)
 8001788:	f000 fc97 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_3_Pin, 1);
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001792:	4830      	ldr	r0, [pc, #192]	; (8001854 <scan7Seg+0x12c>)
 8001794:	f000 fc91 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_4_Pin, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800179e:	482d      	ldr	r0, [pc, #180]	; (8001854 <scan7Seg+0x12c>)
 80017a0:	f000 fc8b 	bl	80020ba <HAL_GPIO_WritePin>
 80017a4:	e036      	b.n	8001814 <scan7Seg+0xec>
  }else if(id == 2){
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <scan7Seg+0x128>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d117      	bne.n	80017de <scan7Seg+0xb6>
	  HAL_GPIO_WritePin(GPIOB, SEG7_1_Pin, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	4828      	ldr	r0, [pc, #160]	; (8001854 <scan7Seg+0x12c>)
 80017b4:	f000 fc81 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_2_Pin, 1);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017be:	4825      	ldr	r0, [pc, #148]	; (8001854 <scan7Seg+0x12c>)
 80017c0:	f000 fc7b 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_3_Pin, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ca:	4822      	ldr	r0, [pc, #136]	; (8001854 <scan7Seg+0x12c>)
 80017cc:	f000 fc75 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_4_Pin, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d6:	481f      	ldr	r0, [pc, #124]	; (8001854 <scan7Seg+0x12c>)
 80017d8:	f000 fc6f 	bl	80020ba <HAL_GPIO_WritePin>
 80017dc:	e01a      	b.n	8001814 <scan7Seg+0xec>
  }else if(id == 3){
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <scan7Seg+0x128>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d116      	bne.n	8001814 <scan7Seg+0xec>
	  HAL_GPIO_WritePin(GPIOB, SEG7_1_Pin, 1);
 80017e6:	2201      	movs	r2, #1
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	481a      	ldr	r0, [pc, #104]	; (8001854 <scan7Seg+0x12c>)
 80017ec:	f000 fc65 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_2_Pin, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <scan7Seg+0x12c>)
 80017f8:	f000 fc5f 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_3_Pin, 1);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <scan7Seg+0x12c>)
 8001804:	f000 fc59 	bl	80020ba <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG7_4_Pin, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180e:	4811      	ldr	r0, [pc, #68]	; (8001854 <scan7Seg+0x12c>)
 8001810:	f000 fc53 	bl	80020ba <HAL_GPIO_WritePin>
  }
  display7SEG(buffer_7SEG[id]);
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <scan7Seg+0x128>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <scan7Seg+0x130>)
 800181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fd68 	bl	80012f4 <display7SEG>
  id++;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <scan7Seg+0x128>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <scan7Seg+0x128>)
 800182c:	6013      	str	r3, [r2, #0]
  id = id % 4;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <scan7Seg+0x128>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	425a      	negs	r2, r3
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	f002 0203 	and.w	r2, r2, #3
 800183c:	bf58      	it	pl
 800183e:	4253      	negpl	r3, r2
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <scan7Seg+0x128>)
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e000      	b.n	8001848 <scan7Seg+0x120>
	if(flag_to_off) return;
 8001846:	bf00      	nop
}
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000064 	.word	0x20000064
 8001850:	20000060 	.word	0x20000060
 8001854:	40010c00 	.word	0x40010c00
 8001858:	20000020 	.word	0x20000020

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_MspInit+0x5c>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <HAL_MspInit+0x5c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6193      	str	r3, [r2, #24]
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_MspInit+0x5c>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x5c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x5c>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_MspInit+0x60>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_MspInit+0x60>)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010000 	.word	0x40010000

080018c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d0:	d113      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_TIM_Base_MspInit+0x44>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_TIM_Base_MspInit+0x44>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_TIM_Base_MspInit+0x44>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201c      	movs	r0, #28
 80018f0:	f000 fa1b 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f4:	201c      	movs	r0, #28
 80018f6:	f000 fa34 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 f8f9 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f001 f855 	bl	8002a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200000cc 	.word	0x200000cc

0800196c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <setTimer>:
struct {
	unsigned int timer_counter ;
	unsigned int timer_flag;
} timer[NUMBER_OF_TIMER];

void setTimer(unsigned int timer_id, unsigned int time){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	timer[timer_id].timer_counter = time *(TIMER_FREQUENCY/1000.0);
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f7fe fe50 	bl	8000628 <__aeabi_ui2d>
 8001988:	a30d      	add	r3, pc, #52	; (adr r3, 80019c0 <setTimer+0x48>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fbdf 	bl	8000150 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f7fe febf 	bl	800071c <__aeabi_d2uiz>
 800199e:	4602      	mov	r2, r0
 80019a0:	4909      	ldr	r1, [pc, #36]	; (80019c8 <setTimer+0x50>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	timer[timer_id].timer_flag = 0;
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <setTimer+0x50>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	f3af 8000 	nop.w
 80019c0:	9999999a 	.word	0x9999999a
 80019c4:	3fb99999 	.word	0x3fb99999
 80019c8:	20000114 	.word	0x20000114

080019cc <runTimer>:

void runTimer(void){
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
	for(unsigned int i = 0; i<NUMBER_OF_TIMER; i++){
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e01d      	b.n	8001a14 <runTimer+0x48>
		if(timer[i].timer_counter > 0){
 80019d8:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <runTimer+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d014      	beq.n	8001a0e <runTimer+0x42>
			timer[i].timer_counter--;
 80019e4:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <runTimer+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019ec:	1e5a      	subs	r2, r3, #1
 80019ee:	490e      	ldr	r1, [pc, #56]	; (8001a28 <runTimer+0x5c>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			if(timer[i].timer_counter <= 0){
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <runTimer+0x5c>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <runTimer+0x42>
				timer[i].timer_flag = 1;
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <runTimer+0x5c>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	605a      	str	r2, [r3, #4]
	for(unsigned int i = 0; i<NUMBER_OF_TIMER; i++){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3301      	adds	r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d9de      	bls.n	80019d8 <runTimer+0xc>
			}
		}
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000114 	.word	0x20000114

08001a2c <getTimerFlag>:

int getTimerFlag(unsigned int timer_id){
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if(timer[timer_id].timer_flag == 1) return 1;
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <getTimerFlag+0x28>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <getTimerFlag+0x1a>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <getTimerFlag+0x1c>
	else return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000114 	.word	0x20000114

08001a58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	runTimer();
 8001a60:	f7ff ffb4 	bl	80019cc <runTimer>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a6c:	f7ff ff7e 	bl	800196c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a72:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a74:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a88:	4c09      	ldr	r4, [pc, #36]	; (8001ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a96:	f001 fb05 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9a:	f7ff fac1 	bl	8001020 <main>
  bx lr
 8001a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001aa8:	08003140 	.word	0x08003140
  ldr r2, =_sbss
 8001aac:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001ab0:	20000140 	.word	0x20000140

08001ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC1_2_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x28>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x28>)
 8001ac2:	f043 0310 	orr.w	r3, r3, #16
 8001ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f923 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fec2 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f93b 	bl	8001d7e <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f903 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000030 	.word	0x20000030
 8001b3c:	20000038 	.word	0x20000038
 8001b40:	20000034 	.word	0x20000034

08001b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_IncTick+0x1c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x20>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_IncTick+0x20>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000038 	.word	0x20000038
 8001b64:	2000013c 	.word	0x2000013c

08001b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <HAL_GetTick+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	2000013c 	.word	0x2000013c

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <__NVIC_EnableIRQ+0x34>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff90 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff2d 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff42 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff90 	bl	8001c6c <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff35 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001daa:	e148      	b.n	800203e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dac:	2201      	movs	r2, #1
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8137 	bne.w	8002038 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4aa3      	ldr	r2, [pc, #652]	; (800205c <HAL_GPIO_Init+0x2c4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d05e      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dd4:	4aa1      	ldr	r2, [pc, #644]	; (800205c <HAL_GPIO_Init+0x2c4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d875      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dda:	4aa1      	ldr	r2, [pc, #644]	; (8002060 <HAL_GPIO_Init+0x2c8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d058      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001de0:	4a9f      	ldr	r2, [pc, #636]	; (8002060 <HAL_GPIO_Init+0x2c8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d86f      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001de6:	4a9f      	ldr	r2, [pc, #636]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d052      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001dec:	4a9d      	ldr	r2, [pc, #628]	; (8002064 <HAL_GPIO_Init+0x2cc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d869      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001df2:	4a9d      	ldr	r2, [pc, #628]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04c      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001df8:	4a9b      	ldr	r2, [pc, #620]	; (8002068 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d863      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a9b      	ldr	r2, [pc, #620]	; (800206c <HAL_GPIO_Init+0x2d4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d046      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
 8001e04:	4a99      	ldr	r2, [pc, #612]	; (800206c <HAL_GPIO_Init+0x2d4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d85d      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d82a      	bhi.n	8001e64 <HAL_GPIO_Init+0xcc>
 8001e0e:	2b12      	cmp	r3, #18
 8001e10:	d859      	bhi.n	8001ec6 <HAL_GPIO_Init+0x12e>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_GPIO_Init+0x80>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e93 	.word	0x08001e93
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e7f 	.word	0x08001e7f
 8001e24:	08001ec1 	.word	0x08001ec1
 8001e28:	08001ec7 	.word	0x08001ec7
 8001e2c:	08001ec7 	.word	0x08001ec7
 8001e30:	08001ec7 	.word	0x08001ec7
 8001e34:	08001ec7 	.word	0x08001ec7
 8001e38:	08001ec7 	.word	0x08001ec7
 8001e3c:	08001ec7 	.word	0x08001ec7
 8001e40:	08001ec7 	.word	0x08001ec7
 8001e44:	08001ec7 	.word	0x08001ec7
 8001e48:	08001ec7 	.word	0x08001ec7
 8001e4c:	08001ec7 	.word	0x08001ec7
 8001e50:	08001ec7 	.word	0x08001ec7
 8001e54:	08001ec7 	.word	0x08001ec7
 8001e58:	08001ec7 	.word	0x08001ec7
 8001e5c:	08001e75 	.word	0x08001e75
 8001e60:	08001e89 	.word	0x08001e89
 8001e64:	4a82      	ldr	r2, [pc, #520]	; (8002070 <HAL_GPIO_Init+0x2d8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6a:	e02c      	b.n	8001ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	623b      	str	r3, [r7, #32]
          break;
 8001e72:	e029      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]
          break;
 8001e7c:	e024      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	3308      	adds	r3, #8
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e01f      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	330c      	adds	r3, #12
 8001e8e:	623b      	str	r3, [r7, #32]
          break;
 8001e90:	e01a      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e013      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	611a      	str	r2, [r3, #16]
          break;
 8001eb2:	e009      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	615a      	str	r2, [r3, #20]
          break;
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x130>
          break;
 8001ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2bff      	cmp	r3, #255	; 0xff
 8001ecc:	d801      	bhi.n	8001ed2 <HAL_GPIO_Init+0x13a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_Init+0x13e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d802      	bhi.n	8001ee4 <HAL_GPIO_Init+0x14c>
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x152>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	401a      	ands	r2, r3
 8001efc:	6a39      	ldr	r1, [r7, #32]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8090 	beq.w	8002038 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f18:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a55      	ldr	r2, [pc, #340]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_GPIO_Init+0x2dc>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f30:	4a51      	ldr	r2, [pc, #324]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a49      	ldr	r2, [pc, #292]	; (800207c <HAL_GPIO_Init+0x2e4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00d      	beq.n	8001f78 <HAL_GPIO_Init+0x1e0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a48      	ldr	r2, [pc, #288]	; (8002080 <HAL_GPIO_Init+0x2e8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_Init+0x1dc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a47      	ldr	r2, [pc, #284]	; (8002084 <HAL_GPIO_Init+0x2ec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_GPIO_Init+0x1d8>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e004      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e002      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_GPIO_Init+0x1e2>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f8a:	493b      	ldr	r1, [pc, #236]	; (8002078 <HAL_GPIO_Init+0x2e0>)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa4:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4937      	ldr	r1, [pc, #220]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb2:	4b35      	ldr	r3, [pc, #212]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4933      	ldr	r1, [pc, #204]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	492d      	ldr	r1, [pc, #180]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4929      	ldr	r1, [pc, #164]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4923      	ldr	r1, [pc, #140]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	491f      	ldr	r1, [pc, #124]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800200c:	4013      	ands	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4919      	ldr	r1, [pc, #100]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4915      	ldr	r1, [pc, #84]	; (8002088 <HAL_GPIO_Init+0x2f0>)
 8002034:	4013      	ands	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	3301      	adds	r3, #1
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f aeaf 	bne.w	8001dac <HAL_GPIO_Init+0x14>
  }
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	372c      	adds	r7, #44	; 0x2c
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	10320000 	.word	0x10320000
 8002060:	10310000 	.word	0x10310000
 8002064:	10220000 	.word	0x10220000
 8002068:	10210000 	.word	0x10210000
 800206c:	10120000 	.word	0x10120000
 8002070:	10110000 	.word	0x10110000
 8002074:	40021000 	.word	0x40021000
 8002078:	40010000 	.word	0x40010000
 800207c:	40010800 	.word	0x40010800
 8002080:	40010c00 	.word	0x40010c00
 8002084:	40011000 	.word	0x40011000
 8002088:	40010400 	.word	0x40010400

0800208c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e001      	b.n	80020ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]
 80020c6:	4613      	mov	r3, r2
 80020c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ca:	787b      	ldrb	r3, [r7, #1]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d6:	e003      	b.n	80020e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	041a      	lsls	r2, r3, #16
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	041a      	lsls	r2, r3, #16
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	43d9      	mvns	r1, r3
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	400b      	ands	r3, r1
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e26c      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002148:	4b8f      	ldr	r3, [pc, #572]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
 8002154:	4b8c      	ldr	r3, [pc, #560]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x12c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e246      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x76>
 8002184:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7f      	ldr	r2, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7a      	ldr	r2, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b78      	ldr	r3, [pc, #480]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xbc>
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a71      	ldr	r2, [pc, #452]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6e      	ldr	r2, [pc, #440]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fcb6 	bl	8001b68 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fcb2 	bl	8001b68 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1fa      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe4>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fca2 	bl	8001b68 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fc9e 	bl	8001b68 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1e6      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x10c>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
 800226e:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1ba      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4939      	ldr	r1, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fc57 	bl	8001b68 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff fc53 	bl	8001b68 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e19b      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4927      	ldr	r1, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fc36 	bl	8001b68 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff fc32 	bl	8001b68 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e17a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03a      	beq.n	80023a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff fc16 	bl	8001b68 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff fc12 	bl	8001b68 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e15a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f000 fa9a 	bl	8002898 <RCC_Delay>
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7ff fbfc 	bl	8001b68 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fbf8 	bl	8001b68 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d908      	bls.n	8002394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e140      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	42420000 	.word	0x42420000
 8002390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b9e      	ldr	r3, [pc, #632]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e9      	bne.n	8002374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a6 	beq.w	80024fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b97      	ldr	r3, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a93      	ldr	r2, [pc, #588]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b8e      	ldr	r3, [pc, #568]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b8b      	ldr	r3, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fbb9 	bl	8001b68 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7ff fbb5 	bl	8001b68 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0fd      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x312>
 8002420:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a7a      	ldr	r2, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x334>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x356>
 8002458:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a69      	ldr	r2, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002472:	4b67      	ldr	r3, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a66      	ldr	r2, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b64      	ldr	r3, [pc, #400]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a63      	ldr	r2, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7ff fb69 	bl	8001b68 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff fb65 	bl	8001b68 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ab      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b57      	ldr	r3, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x37e>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fb53 	bl	8001b68 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fb4f 	bl	8001b68 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e095      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8081 	beq.w	8002606 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d061      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d146      	bne.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff fb23 	bl	8001b68 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fb1f 	bl	8001b68 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e067      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	492d      	ldr	r1, [pc, #180]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a19      	ldr	r1, [r3, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	430b      	orrs	r3, r1
 8002572:	4927      	ldr	r1, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff faf3 	bl	8001b68 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7ff faef 	bl	8001b68 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e037      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x46a>
 80025a4:	e02f      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff fadc 	bl	8001b68 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff fad8 	bl	8001b68 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e020      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x498>
 80025d2:	e018      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e013      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	40007000 	.word	0x40007000
 8002618:	42420060 	.word	0x42420060

0800261c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d0      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800269a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d040      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d115      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e073      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4936      	ldr	r1, [pc, #216]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7ff fa2c 	bl	8001b68 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7ff fa28 	bl	8001b68 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e053      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d210      	bcs.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1cc>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f98a 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003114 	.word	0x08003114
 80027e8:	20000030 	.word	0x20000030
 80027ec:	20000034 	.word	0x20000034

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e027      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	613b      	str	r3, [r7, #16]
      break;
 8002824:	e027      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	613b      	str	r3, [r7, #16]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002872:	613b      	str	r3, [r7, #16]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	693b      	ldr	r3, [r7, #16]
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	007a1200 	.word	0x007a1200
 800288c:	08003124 	.word	0x08003124
 8002890:	08003134 	.word	0x08003134
 8002894:	003d0900 	.word	0x003d0900

08002898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCC_Delay+0x34>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <RCC_Delay+0x38>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a5b      	lsrs	r3, r3, #9
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b4:	bf00      	nop
  }
  while (Delay --);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <RCC_Delay+0x1c>
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000030 	.word	0x20000030
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e041      	b.n	800296a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe ffe0 	bl	80018c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f000 fa6e 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e035      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_TIM_Base_Start_IT+0x90>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_TIM_Base_Start_IT+0x4e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d004      	beq.n	80029c2 <HAL_TIM_Base_Start_IT+0x4e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_TIM_Base_Start_IT+0x94>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d111      	bne.n	80029e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b06      	cmp	r3, #6
 80029d2:	d010      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	e007      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400

08002a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d122      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d11b      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0202 	mvn.w	r2, #2
 8002a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9b4 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9a7 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f9b6 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0204 	mvn.w	r2, #4
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f98a 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f97d 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f98c 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0208 	mvn.w	r2, #8
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f960 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f953 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f962 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0210 	mvn.w	r2, #16
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f936 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f929 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f938 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0201 	mvn.w	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe ff64 	bl	8001a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa6b 	bl	8003092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8fc 	bl	8002de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0220 	mvn.w	r2, #32
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa36 	bl	8003080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIM_ConfigClockSource+0x1c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0b4      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x186>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d03e      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	f200 8087 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x172>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d87f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d050      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x11a>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d03c      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xfa>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d058      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x13a>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d064      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f000 f95e 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f000 f947 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8be 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f915 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8dc 	bl	8002f00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f905 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f89e 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f8f5 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f8ec 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <TIM_Base_SetConfig+0xa8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x28>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x28>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <TIM_Base_SetConfig+0xac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <TIM_Base_SetConfig+0xa8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <TIM_Base_SetConfig+0xac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <TIM_Base_SetConfig+0xa8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	615a      	str	r2, [r3, #20]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 030a 	bic.w	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	031b      	lsls	r3, r3, #12
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 0307 	orr.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	021a      	lsls	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e041      	b.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d004      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40000400 	.word	0x40000400

08003080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	2600      	movs	r6, #0
 80030a8:	4d0c      	ldr	r5, [pc, #48]	; (80030dc <__libc_init_array+0x38>)
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	f000 f822 	bl	80030fc <_init>
 80030b8:	2600      	movs	r6, #0
 80030ba:	4d0a      	ldr	r5, [pc, #40]	; (80030e4 <__libc_init_array+0x40>)
 80030bc:	4c0a      	ldr	r4, [pc, #40]	; (80030e8 <__libc_init_array+0x44>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030cc:	4798      	blx	r3
 80030ce:	3601      	adds	r6, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d6:	4798      	blx	r3
 80030d8:	3601      	adds	r6, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	08003138 	.word	0x08003138
 80030e0:	08003138 	.word	0x08003138
 80030e4:	08003138 	.word	0x08003138
 80030e8:	0800313c 	.word	0x0800313c

080030ec <memset>:
 80030ec:	4603      	mov	r3, r0
 80030ee:	4402      	add	r2, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
